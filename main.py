from PsyTests import Psy_Weariness, Psy_selfefficacy
from AllCourses import Anxiety
from Habits import Sleep, Water, Reading, Body
from PopTests import Pop_Control, Pop_Typeperson
from PsyTests import Psy_Weariness, Psy_selfefficacy, Psy_stress
import Specialists
import Habit
import Tests
import Courses
import Practices
import Markups
import FSM_classes
import asyncio
import sqlite3
from datetime import datetime, timedelta
import admin_commands
import quick_help
import Specialists

from aiogram import Bot, types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aioschedule as schedule

from aiogram.utils.exceptions import BotBlocked

from Token import Token
from Database import db_start, data_profile, affirmation, pre_points_test_weariness, points_test_weariness, pre_answers_test_weariness


async def on_startup(_):
    await db_start()


bot = Bot(Token)
dp = Dispatcher(bot, storage=MemoryStorage())


Specialists.register_handlers_specialist(dp)
Psy_selfefficacy.register_handlers_Psy_selfefficacy(dp)
quick_help.register_handlers_quick_help(dp)
Psy_stress.register_handlers_Psy_stress(dp)
Pop_Control.register_handlers_Pop_Control(dp)
Pop_Typeperson.register_handlers_Pop_typeperson(dp)


@dp.message_handler(commands=['admin_mailing'], state='*', chat_id=417986886)
async def check_active_users(message: types.Message):
    await FSM_classes.Admin.mailing_all.set()
    await bot.send_message(message.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –±–æ—Å—Å! –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å!',
                           parse_mode='html')


@dp.callback_query_handler(state=FSM_classes.MultiDialog.quick_help)
async def inline_quick_help(callback_query: types.CallbackQuery):
    await quick_help.all_way_callback_quick_help(callback_query)


@dp.message_handler(state=FSM_classes.MultiDialog.quick_help)
async def reply_quick_help(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await quick_help.all_way_quick_help(message)



@dp.message_handler(commands=['getuserreport'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await FSM_classes.adminCommands.getUserReportPassword.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportPassword)
async def get_user_report(message: types.Message, state: FSMContext):
    if message.text == 'admin123':
        await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id –Ω—É–∂–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        await FSM_classes.adminCommands.getUserReportId.set()
    else:
        await bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/getuserreport - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportId )
async def get_user_report(message: types.Message, state: FSMContext):
    await state.set_data({"users": message.text})
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await FSM_classes.adminCommands.getUserReportDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportDate)
async def get_user_report(message: types.Message, state: FSMContext):
    users = await state.get_data("users")
    startDate, endDate = message.text.split(' ')
    startDate = startDate.replace(':','')
    endDate = endDate.replace(':','')
    users = str(users['users']).split(' ')
    await admin_commands.createExcelFileReportCommand(startDate,endDate,users)
    with open('userData.xlsx', 'rb') as f:
        await bot.send_document(chat_id=message.from_user.id, document=InputFile(f))


@dp.message_handler(commands=['getuseractions'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await FSM_classes.adminCommands.getUserActionPassword.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionPassword)
async def get_user_report(message: types.Message, state: FSMContext):
    if message.text == 'admin123':
        await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id –Ω—É–∂–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        await FSM_classes.adminCommands.getUserActionId.set()
    else:
        await bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/getuserreport - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionId)
async def get_user_report(message: types.Message, state: FSMContext):
    await state.set_data({"users": message.text})
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await FSM_classes.adminCommands.getUserActionDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionDate)
async def get_user_report(message: types.Message, state: FSMContext):
    users = await state.get_data("users")
    startDate, endDate = message.text.split(' ')
    users = str(users['users']).split(' ')
    await admin_commands.createExcelFileActionCommand(startDate,endDate,users)
    with open('getUserAction.xlsx', 'rb') as f:
        await bot.send_document(chat_id=message.from_user.id, document=InputFile(f))


@dp.message_handler(commands=['getuserreportgraph'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ —á—á:–º–º:–≥–≥–≥–≥')
    await FSM_classes.adminCommands.getUserReportGraphDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportGraphDate)
async def get_user_report(message: types.Message, state: FSMContext):
    try:
        dateStart = datetime.strptime(message.text, '%d:%m:%Y')
        await bot.send_message(message.from_user.id, text='–ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–µ–≥–æ –ø—Ä–∏–µ–º–∞ –≤–æ–¥—ã',reply_markup=Markups.backHabitRe)
        with open("scatter_plot.png", "rb") as f:
            photo = InputFile(f)
            await bot.send_photo(message.from_user.id, photo)
        await admin_commands.createGraphReportCommand(dateStart,message.from_user.id)
        await FSM_classes.MultiDialog.menu.set()
    except ValueError:
        await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n'
                                                          '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º:–≥–≥–≥–≥')
        await FSM_classes.adminCommands.getUserReportGraphDate.set()



@dp.message_handler(content_types=['photo'], state=FSM_classes.Admin.mailing_all)
async def mailing_photo(message: types.Message):
    await message.photo[-1].download(destination_file='mailing.jpg')
    db_user_blocked = sqlite3.connect('Databases/Data_users.db')
    cur_user_blocked = db_user_blocked.cursor()
    users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
    await FSM_classes.MultiDialog.menu.set()
    for user in range(len(users)):
        try:
            photo_mailing = open('mailing.jpg', 'rb')
            await bot.send_photo(chat_id=(users[user][0]), photo=photo_mailing, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_user_blocked.execute(
                'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
            db_user_blocked.commit()


@dp.message_handler(content_types=['text'], state=FSM_classes.Admin.mailing_all)
async def mailing_text(message: types.Message):
    db_user_blocked = sqlite3.connect('Databases/Data_users.db')
    cur_user_blocked = db_user_blocked.cursor()
    users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
    await FSM_classes.MultiDialog.menu.set()
    for user in range(len(users)):
        try:
            await bot.send_message(chat_id=(users[user][0]),
                                   text=message.text, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_user_blocked.execute(
                'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
            db_user_blocked.commit()


@dp.message_handler(commands=['start'], state='*')
async def welcome(message: types.Message):
    await data_profile(user_id=message.from_user.id, first_name=message.from_user.first_name,
                       username=message.from_user.username)
    await FSM_classes.MultiDialog.menu.set()
    Welcome_kb = InlineKeyboardMarkup()
    Welcome_kb.add(InlineKeyboardButton(
        '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', callback_data='Welcome_btn0'))
    mess = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üñê, <b>{message.from_user.first_name}</b>! –†–∞–¥, —á—Ç–æ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Ç—Å—å –æ —Å–≤–æ–µ–º –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ! ' \
           f'\n–ë–æ—Ç Reform - —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞, —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –∞–ø–∞—Ç–∏–∏, –∞ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ!' \
           f'\n\n–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è.' \
           f'\n–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–≥—Ä–∞–¥—ã –Ω–∞ –≤–∞—à–µ–º –ø—É—Ç–∏, –∞ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–≤–µ—Ç–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É!'
    await bot.send_message(message.from_user.id, mess, parse_mode='html', reply_markup=Welcome_kb)
    await log_users(message)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Welcome_btn'), state=FSM_classes.MultiDialog.menu)
async def mailing(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data[-1] == '0':
        enterIn = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
            KeyboardButton('–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É'),
            KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'))
        await bot.send_message(callback_query.from_user.id,
                               '–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?'
                               '\n\n–ù–∞–∂–º–∏—Ç–µ "–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É", —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '
                               '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 36 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å '
                               '–Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è!',
                               parse_mode='html', reply_markup=enterIn)


@dp.message_handler(commands=['main_menu'], state='*')
async def main_menu(message: types.Message, state: FSMContext):
    await FSM_classes.HabitSleep.none.set()
    await FSM_classes.MultiDialog.menu.set()
    await bot.send_message(message.from_user.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é! –ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
                                                 '\n\nüßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è –∏–ª–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è'
                                                 '\nüìù –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É'
                                                 '\nüí™ –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–º–æ–∂–µ—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
                                                 '\nüé¨ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫—É—Ä—Å—ã, —É–∑–Ω–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ —Å–µ–±—è, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏'
                                                 '\nüí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                                                 '\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                           parse_mode='html', reply_markup=Markups.main_kb)
    await log_users(message)


@dp.message_handler(commands=['practices'], state='*')
async def practices(message: types.Message):
    await FSM_classes.MultiDialog.practices.set()
    await Practices.type_practices(message)


@dp.message_handler(commands=['test'], state='*')
async def test(message: types.message, state: FSMContext):
    await FSM_classes.MultiDialog.tests.set()
    await Tests.pretest(message, state)
    await log_users(message)


@dp.message_handler(commands=['courses'], state='*')
async def courses(message: types.Message, state: FSMContext):
    await FSM_classes.MultiDialog.courses.set()
    await Courses.precourse(message, state)
    await log_users(message)


@dp.message_handler(commands=['contacts'], state='*')
async def contacts(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! '
                                                 '–ú–µ–Ω—è –∑–æ–≤—É—Ç Reform. –Ø –æ–∫–∞–∑—ã–≤–∞—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
                                                 '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ –º–µ–Ω—è —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º.'
                                                 '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @APecherkin.',
                           parse_mode='html', reply_markup=Markups.cont)
    await log_users(message)


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('fullversion'), state=FSM_classes.MultiDialog)
# async def fullversion_callback(callback_query: types.CallbackQuery, state: FSMContext):
#     await bot.send_message(callback_query.from_user.id, '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏.'
#                                                         '\n–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:'
#                                                         '‚ùáÔ∏è25 –º–µ–¥–∏—Ç–∞—Ü–∏–π'
#                                                         '‚ùáÔ∏è10 –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫'
#                                                         '‚ùáÔ∏è–¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ'
#                                                         '‚ùáÔ∏è–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–π'
#                                                         '‚ùáÔ∏è–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω—É, –ø–∏—Ç–∞–Ω–∏—é –∏ –æ—Ç–¥—ã—Ö—É –æ—Ç –≤–µ–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
#                                                         '\n\n–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 499 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü?',
#                            parse_mode='html')
#

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Main_menu'), state='*')
async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await FSM_classes.HabitSleep.none.set()
    await FSM_classes.MultiDialog.menu.set()
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ù–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
                                                        '\n\nüßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è –∏–ª–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è'
                                                        '\nüìù –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É'
                                                        '\nüí™ –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–º–æ–∂–µ—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
                                                        '\nüå≥ –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å? –†–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Å–µ–±–µ –∏ –≤—ã—è–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É'
                                                        '\nüí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                                                        '\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                           parse_mode='html', reply_markup=Markups.main_kb)


@dp.message_handler(state=FSM_classes.MultiDialog.practices)
async def reply_practices(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Practices.allreply_practices(message)
    await log_users(message)

@dp.message_handler(state=FSM_classes.MultiDialog.specialist)
async def reply_specialist(message: types.Message, state: FSMContext):
    if message.text == '–ü–µ—Ä–µ–π—Ç–∏':
        await Specialists.choose_specialist(message, state)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await Specialists.test_holms(message, state)
    await log_users(message)

@dp.message_handler(state=FSM_classes.MultiDialog.tests)
async def reply_tests(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await Tests.type_test(message, state)
    await log_users(message)


@dp.message_handler(state=(
        FSM_classes.MultiDialog.test_weariness or FSM_classes.MultiDialog.test_control or FSM_classes.MultiDialog.test_selfefficacy or FSM_classes.MultiDialog.test_typeperson or FSM_classes.MultiDialog.test_stress))
async def reply_alltests(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç –∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
        await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.courses)
async def reply_courses(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await main_menu(message, state)
    await Courses.type_course(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.course_anxiety)
async def reply_anxiety(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
        await log_users(message)


@dp.callback_query_handler(state=FSM_classes.MultiDialog.course_anxiety)
async def reply_anxiety(callback_query: types.CallbackQuery, state: FSMContext):
    await Anxiety.Course_Anxiety(callback_query, state)


@dp.message_handler(state=FSM_classes.MultiDialog.habits)
async def reply_habits(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Habit.choose_habit(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_action)
async def reply_habit_water(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Water.choose_habit_action(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_amount_of_portion)
async def reply_habit_water(message: types.Message, state: FSMContext):
    await Water.choose_habit_water_portions(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_schedule)
async def reply_habit_water(message: types.Message, state: FSMContext):
    await Water.choose_habit_water_schedule(message, state)
    await log_users(message)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('answerWater'), state='*')
async def reply_habit_water(callback_query: types.CallbackQuery, state: FSMContext):
    await Water.answer_water_schedule(callback_query, state)
    await FSM_classes.MultiDialog.menu.set()
    await log_users(callback_query.message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_action)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Sleep.choose_habit_action(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_wakeup)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    await Sleep.choose_habit_sleep_wakeup(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_bedtime)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    await Sleep.choose_habit_sleep_bedtime(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.specialist)
async def reply_specialist(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Specialists.choose_specialist(message, state)
    await log_users(message)


@dp.message_handler(state='*')
async def reply_all(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
        await log_users(message)

    if message.text == '–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É':
        await FSM_classes.MultiDialog.quick_help.set()
        await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ', reply_markup=quick_help.quick_help_menu)
        await log_users(message)
        await quick_help.all_way_quick_help(message)

    if message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç':
        await FSM_classes.MultiDialog.test_weariness.set()
        await pre_points_test_weariness(user_id=message.from_user.id, username=message.from_user.username)
        await pre_answers_test_weariness(user_id=message.from_user.id, username=message.from_user.username)
        async with state.proxy() as data:
            data['count'] = 0
        async with state.proxy() as data:
            data['points'] = 0
        await points_test_weariness(state, user_id=message.from_user.id)
        await state.finish()
        await bot.send_message(message.from_user.id, text=Psy_Weariness.weariness_questions[0], reply_markup=Psy_Weariness.answers)
        db_weariness = sqlite3.connect('Databases/Result_Tests/PSY_Weariness.db')
        cur_weariness = db_weariness.cursor()
        cur_weariness.execute("UPDATE answers SET countOfAnswers = 0 WHERE user_id = ?", (message.from_user.id,))
        db_weariness.commit()

    if message.text == 'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏':
        await FSM_classes.MultiDialog.practices.set()
        await Practices.type_practices(message)
        await log_users(message)

    if message.text == 'üìù –¢–µ—Å—Ç—ã':
        await FSM_classes.MultiDialog.tests.set()
        await Tests.pretest(message, state)
        await log_users(message)

    if message.text == 'üí™ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏':
        await FSM_classes.MultiDialog.habits.set()
        await Habit.prehabits(message, state)
        await log_users(message)

    if message.text == 'üå≥ –°–∞–º–æ–∞–Ω–∞–ª–∏–∑':
        await FSM_classes.MultiDialog.quick_help.set()
        await bot.send_message(message.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                               reply_markup=quick_help.quick_help_menu)
        await log_users(message)
        await quick_help.all_way_quick_help(message)
        await log_users(message)

    if message.text == 'üí¨ –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É':
        await FSM_classes.MultiDialog.specialist.set()
        await Specialists.choose_specialist(message, state)
        await log_users(message)

    if message.text == 'üì• –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await contacts(message)
        await log_users(message)

    if message.text == '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?':
        back = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        back.add(btn1)
        await bot.send_message(message.from_user.id,
                               '–Ø –º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. '
                               '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –∏–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –≤–∞–∂–Ω–æ. '
                               '\n–í —Ä–∞–∑–¥–µ–ª–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—É –∏ —Ä–µ—à–∏—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.'
                               '\n–í —Ä–∞–∑–¥–µ–ª–µ –º—É–∑—ã–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–µ–ª–æ–¥–∏—é –∏ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è'
                               '\n–¢–∞–∫–∂–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å, —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è'
                               '\n\n –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∂–∏–∑–Ω–∏ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å–æ —Å–≤–æ–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º!',
                               parse_mode='html', reply_markup=back)
        await log_users(message)


@dp.channel_post_handler(content_types=['text'])
async def affirmation_mailing_text(message: types.Message):
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    users_affirmation = cur_data.execute(
        'SELECT user_id FROM affirmation').fetchall()
    for user_miling in range(len(users_affirmation)):
        try:
            await bot.send_message(chat_id=(users_affirmation[user_miling][0]),
                                   text=message.text, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_data.execute('UPDATE affirmation SET user_id = 0 WHERE user_id = ?',
                             (users_affirmation[user_miling][0],))
            db_data.commit()
    cur_data.execute('DELETE FROM affirmation WHERE user_id = ?', (int(0),))
    db_data.commit()


@dp.channel_post_handler(content_types=['photo'])
async def affirmation_mailing_photo(message: types.Message):
    await message.photo[-1].download(destination_file='affirmation.jpg')
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    users_affirmation = cur_data.execute(
        'SELECT user_id FROM affirmation').fetchall()
    await asyncio.sleep(1)
    for user_miling in range(len(users_affirmation)):
        try:
            photo = open('affirmation.jpg', 'rb')
            await bot.send_photo(chat_id=(users_affirmation[user_miling][0]),
                                 photo=photo, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_data.execute('UPDATE affirmation SET user_id = 0 WHERE user_id = ?',
                             (users_affirmation[user_miling][0],))
            db_data.commit()
    cur_data.execute('DELETE FROM affirmation WHERE user_id = ?', (int(0),))
    db_data.commit()


async def scheduler_sleep_message_wakeup():
    db_scheduler_sleep = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler = db_scheduler_sleep.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    users_wakeup = cur_scheduler.execute(
        'SELECT user_id FROM sleep WHERE wakeup = ?', (now.strftime('%H:%M'),)).fetchall()
    for user_wakeup in range(len(users_wakeup)):
        try:
            await bot.send_message(chat_id=users_wakeup[user_wakeup][0], text='–ü–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å! '
                                                                              '\n–ù–∞—á–∏–Ω–∞—Ç—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ! –ê –≤—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_scheduler.execute(
                'UPDATE sleep SET user_id = 0 WHERE user_id = ?', (users_wakeup[user_wakeup][0],))
            db_scheduler_sleep.commit()
    cur_scheduler.execute('DELETE FROM sleep WHERE user_id = ?', (int(0),))
    db_scheduler_sleep.commit()


async def scheduler_sleep_message_bedtime():
    db_scheduler_sleep = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler = db_scheduler_sleep.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    users_bedtime = cur_scheduler.execute(
        'SELECT user_id FROM sleep WHERE bedtime = ?', (now.strftime('%H:%M'),)).fetchall()
    for user_bedtime in range(len(users_bedtime)):
        try:
            await bot.send_message(chat_id=users_bedtime[user_bedtime][0],
                                   text='–í—ã –ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤–∞–º –ø–æ—Ä–∞ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å!'
                                        '\n–ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥—ë—Ç –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! '
                                        '\n–ü–æ–º–Ω–∏—Ç–µ, –≤–µ–ª–∏–∫–æ–µ –Ω–∞—á–∏–Ω–µ—Ç—Å—è —Å –º–∞–ª–æ–≥–æ!')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_scheduler.execute(
                'UPDATE sleep SET user_id = 0 WHERE user_id = ?', (users_bedtime[user_bedtime][0],))
            db_scheduler_sleep.commit()
    cur_scheduler.execute('DELETE FROM sleep WHERE user_id = ?', (int(0),))
    db_scheduler_sleep.commit()


async def scheduler_water_message():
    db_scheduler_water = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler_water = db_scheduler_water.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    time_in_min_now = int(now.strftime('%H:%M').split(':')[0]) * 60 + int(now.strftime('%H:%M').split(':')[1])
    today = datetime.today()
    weekday = today.weekday()

    if weekday < 5:
        users = cur_scheduler_water.execute(
            'SELECT user_id FROM water WHERE interval != 0 AND schedule IN ("weekdays", "both")').fetchall()
    if weekday >= 5:
        users = cur_scheduler_water.execute(
            'SELECT user_id FROM water WHERE interval != 0 AND schedule IN ("weekends", "both")').fetchall()

    if time_in_min_now in range(600, 1381):
        for user in users:
            interval = cur_scheduler_water.execute(
                'SELECT interval FROM water WHERE user_id = ?', (user[0],)).fetchone()
            amount_of_portions = cur_scheduler_water.execute(
                'SELECT amountOfPortions FROM water WHERE user_id = ?', (user[0],)).fetchone()

            if time_in_min_now % interval[0] == 0:
                try:
                    await bot.send_message(chat_id=user[0], text='–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!'
                                                                 '\n–û–±—ä–µ–º –ø—Ä–∏—ë–º–∞ –≤–æ–¥—ã - ' + str(
                        round(2000 / amount_of_portions[0])) + ' –º–ª.')
                    await asyncio.sleep(0.1)
                except BotBlocked:
                    cur_scheduler_water.execute(
                        'UPDATE water SET user_id = 0 WHERE user_id = ?', (users[user[0]][0],))
                    db_scheduler_water.commit()
                cur_scheduler_water.execute('DELETE FROM water WHERE user_id = ?', (int(0),))
                db_scheduler_water.commit()
            if time_in_min_now == 1380:
                today = datetime.today()
                tableName = 'date_' + str(today)[0:10].replace('-', '')
                cur_scheduler_water.execute(f'ALTER TABLE waterDates ADD COLUMN {tableName} TEXT')
                await bot.send_message(chat_id=user[0], text='–ü–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ—Ä–º—É?',
                                       reply_markup=Markups.waterAnswers)


async def scheduler_sleep():
    schedule.every(1).minute.do(scheduler_sleep_message_wakeup)
    schedule.every(1).minute.do(scheduler_sleep_message_bedtime)
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    time_in_min_now = int(now.strftime('%H:%M').split(':')[0]) * 60 + int(now.strftime('%H:%M').split(':')[1])
    if time_in_min_now >= 600 and time_in_min_now <= 1380:
        schedule.every(1).minute.do(scheduler_water_message)
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)


async def log_users(message: types.Message):
    now = datetime.now()
    botlogfile = open('LogsBot', 'a')
    print(now.strftime('%d-%m-%Y %H:%M'), ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ' + message.from_user.first_name,
          message.from_user.id, '–ù–∞–ø–∏—Å–∞–ª - ' + message.text, file=botlogfile)
    botlogfile.close()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler_sleep())
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
